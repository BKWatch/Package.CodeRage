<?php

/**
 * Defines the class CodeRage\Test\Operations\OperationList
 *
 * File:        CodeRage/Test/Operations/OperationList.php
 * Date:        Mon Apr 30 22:48:17 EDT 2012
 * Notice:      This document contains confidential information
 *              and trade secrets
 *
 * @copyright   2015 CounselNow, LLC
 * @author      Jonathan Turkanis
 * @license     All rights reserved
 */

namespace CodeRage\Test\Operations;

use DOMDocument;
use DOMElement;
use Exception;
use Throwable;
use CodeRage\Config;
use CodeRage\Error;
use CodeRage\Util\XmlEncoder;
use CodeRage\Xml;


/**
 * Represents a sequence of operation invocations
 */
final class OperationList extends OperationListBase {

    /**
     * Constructs an instance of CodeRage\Test\Operations\OperationList
     *
     * @param string $description The operation list description
     * @param CodeRage\Util\Properties $properties The collection of properties
     * @param array $config An associative array of configuration variables
     * @param string $path The path to the XML description of this operation
     *   list, if any
     */
    protected function __construct($description, $properties, $config, $path)
    {
        parent::__construct($description, $properties, $config, $path);
    }

        /*
         * Accessor methods
         */

    /**
     * Returns the underlying list of instances of
     * CodeRage\Test\Operations\Operation
     *
     * @return array
     */
    public function operations()
    {
        return $this->operations;
    }

        /*
         * Operation execution methods
         */

    /**
     * Executes this operation list by invoking execute() on each underlying
     * operation in order
     *
     * @return mixed
     */
    public function execute()
    {
        $prev = null;
        try {
            $prev = $this->installConfig();
            foreach ($this->operations as $op)
                $this->executeOperation($op, 'execute');
        } finally {
            if ($prev !== null)
                Config::setCurrent($prev);
            $this->clearConfig();
        }
    }

    /**
     * Invokes test() on each of the underlying operations, in order
     *
     * @throws CodeRage\Error
     */
    public function test()
    {
        $prev = null;
        $i = null;
        try {
            $prev = $this->installConfig();
            foreach ($this->operations as $op)
                $this->executeOperation($op, 'test');
        } catch (TerminatorException $e) {
            $e->handle();
        } finally {
            if ($prev !== null)
                Config::setCurrent($prev);
            $this->clearConfig();
        }
    }

    /**
     * Invokes generate() on each of the underlying operations, in order,
     * normalizing the output
     */
    public function generate()
    {
        $prev = null;
        try {
            $prev = $this->installConfig();
            foreach ($this->operations as $op)
                $this->executeOperation($op, 'generate');
            foreach ($this->operations as $op)
                $op->normalize();
        } finally {
            if ($prev !== null)
                Config::setCurrent($prev);
            $this->clearConfig();
        }
    }

        /*
         * Load and save methods
         */

    /**
     * Returns an instance of CodeRage\Test\Operations\OperationList newly
     * constructed from the specified file
     *
     * @param string $path The path to an XML document conforming to the schema
     *   "operation.xsd" and having document element "operationList"
     * @return CodeRage\Test\Operations\Operation
     */
    public static function load($path)
    {
        $dom = Xml::loadDocument($path, self::SCHEMA_PATH);
        $dom->xinclude();
        $elt = $dom->documentElement;
        if ($elt->localName != 'operationList')
            throw new
                Error([
                    'status' => 'UNEXPECTED_CONTENT',
                    'message' =>
                        "Failed parsing '$path': expected 'operationList' " .
                        "element; found '" . $elt->localName . "'"
                ]);
        return self::loadXml($elt, $path);
    }

    /**
     * Creates an XML document from this operation list and saves it to the
     * given path
     *
     * @param string $path The path
     */
    public function save($path)
    {
        $dom = new DOMDocument('1.0', 'utf-8');
        $dom->formatOutput = true;
        $dom->appendChild(
            $dom->createComment(
                "AUTOMATICALLY GENERATED BY CODERAGE TOOLS - DO NOT EDIT"
            )
        );
        $dom->appendChild($dom->createComment('Copyright CodeRage'));
        $dom->appendChild($this->saveXml($dom));
        $dom->loadXml($dom->saveXml(), LIBXML_NSCLEAN);  // Tidy namespaces
        $dom->save($path);
    }

    /**
     * Returns an instance of CodeRage\Test\Operations\OperationList
     * newly constructed from the specified XML element
     *
     * @param string $path An element with localName "operationList" conforming
     *   to the schema "operation.xsd"
     * @param string $baseUri The URI for resolving relative paths referenced by
     *   $elt
     * @return CodeRage\Test\Operations\OperationList
     */
    public static function loadXml(DOMElement $elt, $baseUri)
    {
        $description = Xml::childContent($elt, 'description');
        $properties = self::loadProperties($elt);
        $config = self::loadConfig($elt);
        $path = $baseUri !== null ?
            $baseUri :
            Xml::documentPath($elt->ownerDocument);
        $opList =
            new OperationList(
                    $description,
                    $properties,
                    $config,
                    $path
                );
        $operations = Xml::firstChildElement($elt, 'operations');
        foreach (Xml::childElements($operations, 'operation') as $child) {
            $op = Operation::loadXml($child, $baseUri, $opList);
            if ($op->schedule() !== null)
                throw new
                    Error([
                        'status' => 'UNEXPECTED_CONTENT',
                        'message' =>
                            'Only operations in scheduled operation lists ' .
                            'can have schedules'

                    ]);
            $opList->operations[] = $op;
        }
        return $opList;
    }

    /**
     * Returns an XML element representing this operation list
     *
     * @param DOMDocument $dom An instance of DOMDocument used for constructing
     *   XML elements
     * @return DOMElement An XML element with localName "operationList"
     */
    public function saveXml(DOMDocument $dom)
    {
        $ns = self::NAMESPACE_URI;
        $elt = XmlEncoder::createElement($dom, 'operationList', $ns);

        // Handle description
        $this->appendElement($dom, $elt, 'description', $this->description());

        // Handle properties
        $properties = $this->createPropertiesElement($dom);
        if ($properties !== null)
            $elt->appendChild($properties);

        // Handle config
        $config = $this->createConfigElement($dom);
        if ($config !== null)
            $elt->appendChild($config);

        // Handle operations
        $operations = $dom->createElementNS($ns, 'operations');
        foreach ($this->operations as $op)
            $operations->appendChild($op->saveXml($dom));
        $elt->appendChild($operations);

        return $elt;
    }

    /**
     * Helpder method for execute(), test(), and generate()
     *
     * @param CodeRage\Test\Operations\Operation $op
     * @param string One of 'execute', 'test', or 'generate'
     */
    private function executeOperation(Operation $op, $method)
    {
        $this->logOperation($op);
        try {
            $op->$method();
        } catch (\Throwable $e) {
            $this->logOperation($op, $e);
            if ($method !== 'execute')
                throw $e;
        }
    }

    /**
     * Logs the given operation, before or after execution
     *
     * @param CodeRage\Test\Operations\Operation $op
     * @param Throwable $e The exception thrown by the operation, if any
     */
    private function logOperation(Operation $op, ?Throwable $e = null)
    {
        $name = pathinfo($op->path(), PATHINFO_FILENAME);
        $message =
            "Operation List '$name': ";
        if ($e === null) {
            $message .= "Executing '{$op->description()}'";
        } else {
            $e = Error::wrap($e);
            $message .= "Failed executing '{$op->description()}': $e";
        }
        \CodeRage\Log::current()->logMessage($message);
    }

    /**
     * The list of instances of CodeRage\Test\Operations\Operation
     *
     * @var array
     */
    private $operations = [];

}
